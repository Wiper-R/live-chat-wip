// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  username             String         @unique
  name                 String
  password             String
  Message              Message[]
  Chats                Chat[]
  OutgoingRelationship Relationship[] @relation(name: "OutgoingRelationship")
  IncomingRelationship Relationship[] @relation(name: "IncomingRelationship")
}

model Chat {
  id         String    @id @default(cuid())
  Message    Message[]
  Recipients User[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  senderId  String
  createdAt DateTime @default(now())
  Sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  Chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Relationship {
  id          String             @id @default(cuid())
  recipientId String
  senderId    String
  status      RelationshipStatus @default(pending)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  Sender      User               @relation(name: "OutgoingRelationship", fields: [senderId], references: [id], onDelete: Cascade)
  Recipient   User               @relation(name: "IncomingRelationship", fields: [recipientId], references: [id], onDelete: Cascade)
  userIds     String[]           @unique
}

enum RelationshipStatus {
  pending
  accepted
}
